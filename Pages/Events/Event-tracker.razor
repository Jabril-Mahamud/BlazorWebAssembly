@page "/event-tracker"
@using System.Net.Http.Json
@using BlazorWebAssembly.Models
@inject HttpClient Http
@inject IConfiguration Configuration

<h3>Event Tracker</h3>

<AuthorizeView>
    <Authorized>
        <div>
            <label for="eventName">Event Name:</label>
            <input type="text" id="eventName" @bind="NewEventName" />
            <label for="eventDate">Event Date:</label>
            <input type="datetime-local" id="eventDate" @bind="NewEventDate" />
            <button @onclick="AddEvent">Add Event</button>
        </div>
        <hr />
        <h4>Upcoming Events</h4>
        @if (Events == null)
        {
            <p>Loading...</p>
        }
        else if (!Events.Any())
        {
            <p>No events found.</p>
        }
        else
        {
            <ul>
                @foreach (var eventItem in Events)
                {
                    <li>
                        <strong>@eventItem.Name:</strong>
                        <span>@eventItem.Date.ToString("f")</span>
                        <span>(@GetTimeToEvent(eventItem))</span>
                        <button @onclick="() => RemoveEvent(eventItem)">Remove</button>
                    </li>
                }
            </ul>
        }
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <div class="alert alert-warning text-center" role="alert">
                <h4 class="alert-heading">Access Denied</h4>
                <p>You are not authorized to view this page.</p>
                <a href="authentication/login" class="btn btn-primary">Log in</a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string NewEventName { get; set; } = string.Empty;
    private DateTime NewEventDate { get; set; } = DateTime.Now;
    private List<EventItem> Events { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            Events = await Http.GetFromJsonAsync<List<EventItem>>($"{Configuration["ApiBaseUrl"]}/api/events");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
            // You might want to show an error message to the user here
        }
    }

    private async Task AddEvent()
    {
        if (!string.IsNullOrWhiteSpace(NewEventName))
        {
            var newEvent = new EventItem { Name = NewEventName, Date = NewEventDate };
            try
            {
                var response = await Http.PostAsJsonAsync($"{Configuration["ApiBaseUrl"]}/api/events", newEvent);
                if (response.IsSuccessStatusCode)
                {
                    await LoadEvents();
                    NewEventName = string.Empty;
                    NewEventDate = DateTime.Now;
                }
                else
                {
                    Console.WriteLine($"Error adding event: {response.StatusCode}");
                    // You might want to show an error message to the user here
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding event: {ex.Message}");
                // You might want to show an error message to the user here
            }
        }
    }

    private async Task RemoveEvent(EventItem eventItem)
    {
        try
        {
            var response = await Http.DeleteAsync($"{Configuration["ApiBaseUrl"]}/api/events/{eventItem.Id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadEvents();
            }
            else
            {
                Console.WriteLine($"Error removing event: {response.StatusCode}");
                // You might want to show an error message to the user here
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing event: {ex.Message}");
            // You might want to show an error message to the user here
        }
    }

    private string GetTimeToEvent(EventItem eventItem)
    {
        var timeSpan = eventItem.Date - DateTime.Now;
        if (timeSpan.TotalSeconds < 0)
        {
            return $"{-timeSpan.Days} days since the event";
        }
        else
        {
            return $"{timeSpan.Days} days until the event";
        }
    }
}